ICON = "icon-default.jpg"
HTTP_HEADERS = {"User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/604.5.6 (KHTML, like Gecko) Version/11.0.3 Safari/604.5.6"}

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS)

	title = html.xpath('//meta[@property="og:title"]/@content')[0]
	summary = html.xpath('//meta[@property="og:description"]/@content')[0]
	thumb = html.xpath('//meta[@property="og:image"]/@content')[0]

	return VideoClipObject(
		title = title,
		summary = summary,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback=ICON)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = 720,
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	html = HTML.ElementFromURL(url, headers=HTTP_HEADERS)
	video_url = html.xpath('//video/source/@src')[0]
	Log(" --> Video URL: {}".format(video_url))

	return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(url=video_url))
