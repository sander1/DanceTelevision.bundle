JSON_URL = 'http://player.dancetrippin.tv/video/list/%s/'
AVAILABLE_RES = ('720', '480')
ICON = 'icon-default.jpg'

####################################################################################################
def NormalizeURL(url):

	return url

####################################################################################################
def MetadataObjectForURL(url):

	(url, category_id) = url.split('#')
	slug = url.split('/')[-2]

	for video in JSON.ObjectFromURL('http://player.dancetrippin.tv/video/list/%s/' % category_id):

		if video['slug'] == slug:

			title = video['title']
			summary = String.DecodeHTMLEntities(String.StripTags(video['description'])).strip()

			if video['image']:
				thumb = 'http://player.dancetrippin.tv/media/%s' % video['image']

			return VideoClipObject(
				title = title,
				summary = summary,
				thumb = Resource.ContentsOfURLWithFallback(url=thumb, fallback=ICON)
			)

	raise Ex.MediaNotAvailable

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url, res=res))],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = res,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		) for res in AVAILABLE_RES
	]

####################################################################################################
@indirect
def PlayVideo(url, res='720', **kwargs):

	(url, category_id) = url.split('#')
	html = HTML.ElementFromURL(url)
	vimeo_url = html.xpath('//iframe[contains(@src, "http://player.vimeo.com/video/")]/@src')

	if len(vimeo_url) < 1:
		raise Ex.MediaNotAvailable

	media = URLService.MediaObjectsForURL(vimeo_url[0])
	index = AVAILABLE_RES.index(res)

	for resolution_index in range(index, len(AVAILABLE_RES)):
		current_resolution = AVAILABLE_RES[resolution_index]
		for video in media:
			if video.container != Container.MP4 or video.video_codec != VideoCodec.H264:
				continue
			if str(video.video_resolution) == current_resolution:
				return Redirect(video.parts[0].key)

	return Redirect(media[-1].parts[0].key)
